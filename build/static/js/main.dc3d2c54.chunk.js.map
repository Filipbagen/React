{"version":3,"sources":["CountryInfo.js","Header.js","CountryDetails.js","CountryList.js","App.js","reportWebVitals.js","index.js"],"names":["Country","styled","div","Bar","props","width","InfoStyle","p","CountryInfo","country","detailed","largest","ratio","area","detailedPath","cca3","style","textDecoration","color","to","options","scale","reverse","max","flag","name","common","Math","round","capital","subregion","Home","generateRandomCountry","countriesWithBorders","countries","filter","borders","length","floor","random","Header","displayedCountries","localData","window","localStorage","getItem","toFind","JSON","parse","setItem","stringify","found","map","includes","onClick","Container","CountryDetails","getCountryByCca3","find","useParams","SortedBorderCountries","border","sort","a","b","Input","input","CountryList","useState","searchString","setSearchString","allCountries","sortedCountries","slice","sortedFilteredWords","lowerCaseWord","toLowerCase","lowerCaseSearchString","indexOf","onChange","event","target","value","placeholder","index","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc3d2c54.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport Tilt from 'react-tilt'\nimport { Link } from 'react-router-dom'\n\n// Style\nconst Country = styled.div`\n    background-color: #fff;\n    width: 25vw;\n    margin: 6pt;\n    padding: 1pt 8pt;\n    border-radius: 5pt;\n    box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.2);\n    border-radius: 7pt;\n    transition: .2s;\n    text-decoration: none;\n\n    &:hover {\n        box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\n    }\n`\n\nconst Bar = styled.div`\n    width: ${props => props.width};\n    height: 10pt;\n    background-color: #3F66A6;\n    margin-bottom: 10pt;\n    border-radius: 3pt;\n`\n\nconst InfoStyle = styled.p`\n    padding: 0;\n`\n\n// Component\nconst CountryInfo = ({ country, detailed, largest }) => {\n  // Constants\n  const ratio = country.area / largest * 100\n  const detailedPath = '/country/' + country.cca3\n\n  return (\n    <Link style={{ textDecoration: 'none', color: 'inherit' }} to={detailedPath}>\n      <Tilt options={{ scale: 1.02, reverse: true, max: 20 }}>\n        <Country>\n\n          <InfoStyle> <b>{country.flag} {country.name.common}</b> • {Math.round(country.area / 100000) / 10} million km<sup>2</sup></InfoStyle>\n          <Bar width={ratio + '%'} />\n\n          {/* Conditional Rendering */}\n          {detailed &&\n            <div>\n              <InfoStyle>Capital: {country.capital}</InfoStyle>\n              <InfoStyle>Region: {country.subregion}</InfoStyle>\n            </div>}\n\n        </Country>\n      </Tilt>\n    </Link>\n  )\n}\n\nexport default CountryInfo\n","import styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport countries from 'world-countries'\n\n// Style\nconst Home = styled.div`\n    paddin: 200pt;\n    box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.2);\n`\n\nconst generateRandomCountry = () => {\n  const countriesWithBorders = countries.filter(country => country.borders.length > 0)\n  const randomCountry = Math.floor(Math.random() * countriesWithBorders.length)\n  const countryToFind = countriesWithBorders[randomCountry]\n\n  return countryToFind\n}\n\n// Component\nconst Header = ({ displayedCountries }) => {\n  const localData = window.localStorage.getItem('toFind')\n  let toFind = localData ? JSON.parse(localData) : null\n\n  if (!toFind) {\n    toFind = generateRandomCountry()\n    window.localStorage.setItem('toFind', JSON.stringify(toFind))\n  }\n\n  const newCountry = () => {\n    window.localStorage.setItem('toFind', JSON.stringify(generateRandomCountry()))\n  }\n\n  // Constants\n  const found = displayedCountries.map(country => country.cca3).includes(toFind.cca3)\n\n  return (\n    <div>\n      <Home>\n\n        <button onClick={newCountry}>\n            Change Country\n        </button>\n\n        <Link to='/'>🏠 Home</Link>\n      </Home>\n      {found ? (\n        <h1>🎉 You won!</h1>\n      ) : (\n        <h1>Find {toFind.flag}{toFind.name.common}</h1>\n      )}\n\n    </div>\n  )\n}\n\nexport default Header\n","import CountryInfo from './CountryInfo'\nimport { useParams } from 'react-router'\nimport styled from 'styled-components'\nimport countries from 'world-countries'\nimport Header from './Header'\n\n// Style\nconst Container = styled.div`\n  margin-top: 0pt;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`\n\n// Component\nconst CountryDetails = () => {\n  // Function\n  const getCountryByCca3 = (cca3) => {\n    const CountryByCca3 = countries.find(country => country.cca3 === cca3)\n    return (CountryByCca3)\n  }\n\n  // Constants\n  const { cca3 } = useParams()\n  const clickedCountry = getCountryByCca3(cca3)\n  const borderCountries = clickedCountry.borders.map(border => getCountryByCca3(border))\n  const SortedBorderCountries = borderCountries.sort((a, b) => b.area - a.area)\n\n  return (\n    <div>\n\n      <Header displayedCountries={SortedBorderCountries} />\n\n      {SortedBorderCountries.length === 0\n        ? <h1>🤷🏽‍♂️ {getCountryByCca3(cca3).name.common} does not have any border countries</h1>\n        : (\n          <div>\n            <h4>Border countries to</h4>\n            <h1>{getCountryByCca3(cca3).flag} {getCountryByCca3(cca3).name.common}</h1>\n          </div>\n        )}\n\n      <Container>\n        {SortedBorderCountries.map((country) => <CountryInfo country={country} detailed key={country.cca3} largest={SortedBorderCountries[0].area} />)}\n      </Container>\n    </div>\n  )\n}\n\nexport default CountryDetails\n","import countries from 'world-countries'\nimport styled from 'styled-components'\nimport CountryInfo from './CountryInfo'\nimport Header from './Header'\nimport { useState } from 'react'\n\n// Style\nconst Container = styled.div`\n    margin-top: 100pt;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Input = styled.input`\n    border: none;\n    outline: none;\n    height: 26pt;\n    width: 240pt;\n    position: absolute;\n    top: 60pt;\n    border-radius: 10pt;\n    box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.2);\n`\n\n// Component\nconst CountryList = () => {\n  // Function\n  const TextInput = (event) => {\n    setSearchString(event.target.value)\n  }\n\n  const matchText = (props) => {\n    const word = props.name.common\n    const lowerCaseWord = word.toLowerCase()\n    const lowerCaseSearchString = searchString.toLowerCase()\n    return (lowerCaseWord.indexOf(lowerCaseSearchString) === 0)\n  }\n\n  // Constants\n  const [searchString, setSearchString] = useState('')\n  const allCountries = countries.filter(country => country.name.common !== 'Antarctica')\n  const sortedCountries = allCountries.sort((a, b) => b.area - a.area).slice(0, 15)\n\n  const filteredWords = allCountries.filter(matchText)\n  const sortedFilteredWords = filteredWords.slice(0, 15)\n\n  return (\n\n    <div>\n      <Header displayedCountries={sortedFilteredWords} />\n      <Input onChange={TextInput} placeholder='Search country...' />\n\n      <Container>\n        {sortedFilteredWords.map((country, index) => <CountryInfo country={country} detailed={index < 6} key={country.cca3} largest={sortedCountries[0].area} />)}\n      </Container>\n\n    </div>\n  )\n}\n\nexport default CountryList\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport CountryDetails from './CountryDetails'\nimport CountryList from './CountryList'\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <Switch>\n\n          <Route path='/country/:cca3'>\n            <CountryDetails />\n          </Route>\n\n          <Route path='/'>\n            <CountryList />\n          </Route>\n\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}