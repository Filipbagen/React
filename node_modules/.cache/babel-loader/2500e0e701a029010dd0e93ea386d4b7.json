{"ast":null,"code":"var _jsxFileName = \"/Users/filip/coding/lab1/src/App.js\";\nimport countries from 'world-countries';\nimport CountryInfo from './CountryInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  countries.sort((a, b) => b.area - a.area);\n  const sortedCountries = countries.filter(country => country.name.common !== 'Antarctica').slice(0, 15);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [sortedCountries.map((country, i) => /*#__PURE__*/_jsxDEV(CountryInfo, {\n      detalied: i < 5,\n      country: country,\n      largest: countries[0].area\n    }, country.cca3, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 44\n    }, this)), console.log(detalied)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/filip/coding/lab1/src/App.js"],"names":["countries","CountryInfo","App","props","sort","a","b","area","sortedCountries","filter","country","name","common","slice","map","i","cca3","console","log","detalied"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AACrBH,EAAAA,SAAS,CAACI,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAApC;AACA,QAAMC,eAAe,GAAGR,SAAS,CAACS,MAAV,CAAiBC,OAAO,IAAIA,OAAO,CAACC,IAAR,CAAaC,MAAb,KAAwB,YAApD,EAAkEC,KAAlE,CAAwE,CAAxE,EAA2E,EAA3E,CAAxB;AAEA,sBACE;AAAA,eACGL,eAAe,CAACM,GAAhB,CAAoB,CAACJ,OAAD,EAAUK,CAAV,kBAAgB,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEA,CAAC,GAAG,CAA3B;AAAiD,MAAA,OAAO,EAAEL,OAA1D;AAAmE,MAAA,OAAO,EAAEV,SAAS,CAAC,CAAD,CAAT,CAAaO;AAAzF,OAAmCG,OAAO,CAACM,IAA3C;AAAA;AAAA;AAAA;AAAA,YAApC,CADH,EAEGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAVD;;KAAMjB,G;AAYN,eAAeA,GAAf","sourcesContent":["import countries from 'world-countries'\nimport CountryInfo from './CountryInfo'\n\nconst App = (props) => {\n  countries.sort((a, b) => b.area - a.area)\n  const sortedCountries = countries.filter(country => country.name.common !== 'Antarctica').slice(0, 15)\n\n  return (\n    <div>\n      {sortedCountries.map((country, i) => <CountryInfo detalied={i < 5} key={country.cca3} country={country} largest={countries[0].area} />)}\n      {console.log(detalied)}\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}